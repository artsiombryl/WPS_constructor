# Generated by Django 4.0.4 on 2022-06-05 10:14

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Amperage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amperage', models.IntegerField(help_text='Укажите силу тока, А')),
            ],
        ),
        migrations.CreateModel(
            name='AmperageType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('AC', 'AC'), ('DC+', 'DC+'), ('DC-', 'DC-'), ('Pulsed', 'Pulsed')], help_text='Выберите род/полярность тока', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='BaseMetalA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Группы:1.1;1.2;11.1 СТБ ISO 15608 (Ст3,20,09Г2С,16ГС,17Г1С)', 'Группа 1'), ('Группа:6.2 CТБ ISO 15608 (12Х1МФ,15Х1М1Ф)', 'Группа 2'), ('Группа:8.1 CТБ ISO 15608 (12Х18Н9,12Х18Н9Т,12Х18Н12Т,08Н18Н10Т)', 'Группа 3')], help_text='Выберите основной металл А', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='BaseMetalB',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Группы:1.1;1.2;11.1 СТБ ISO 15608 (Ст3,20,09Г2С,16ГС,17Г1С)', 'Группа 1'), ('Группа:6.2 CТБ ISO 15608 (12Х1МФ,15Х1М1Ф)', 'Группа 2'), ('Группа:8.1 CТБ ISO 15608 (12Х18Н9,12Х18Н9Т,12Х18Н12Т,08Н18Н10Т)', 'Группа 3')], help_text='Выберите основной металл B', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Calcination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caltination', models.CharField(help_text='Укажите необходимость прокалки', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='CoolingSpeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speed', models.CharField(help_text='Укажите скорость охлаждения', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='EdgeBluntingSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('edgesize', models.FloatField(help_text='Укажите величину притупления кромок, мм')),
            ],
        ),
        migrations.CreateModel(
            name='EdgePrepapration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preparation', models.CharField(choices=[('Ручная', 'Ручная'), ('Механическая', 'Механическая')], help_text='Укажите вид подготовки свариваемых кромок', max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='ExcessPenetration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('excess', models.FloatField(help_text='Укажите превышение проплава на высоту, мм')),
            ],
        ),
        migrations.CreateModel(
            name='FillerDiameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diameter', models.FloatField(help_text='Укажите диаметр присадочного материала, мм')),
            ],
        ),
        migrations.CreateModel(
            name='FillerType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('FM1', 'Non-alloy and fine grain steels'), ('FM2', 'High-strength steels'), ('FM3', 'Creep-resisting steels Cr < 3.75 %'), ('FM4', 'Creep-resisting steels 3.75 <= Cr <= 12 %'), ('FM5', 'Stainless and heat-resisting steels'), ('FM6', 'Nickel and nickel alloys')], help_text='Выберите тип присадочного материала', max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='GapSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gapsize', models.FloatField(help_text='Укажите величину зазора в собранном стыке, мм')),
            ],
        ),
        migrations.CreateModel(
            name='GasConsumption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consump', models.CharField(help_text='Укажите расход защитного газа', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='HeatingMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Конвективный', 'Конвективный'), ('Индукционный', 'Индукционный'), ('Радиационный', 'Радиационный')], help_text='Укажите необходимость прокалки', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='HeatingTemp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temp', models.IntegerField(help_text='Укажите температуру подогрева')),
            ],
        ),
        migrations.CreateModel(
            name='HeatTreatType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Укажите вид термической обработки', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='HoldingTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.CharField(help_text='Укажите время выдержки', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='InterRollerTemp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temp', models.IntegerField(help_text='Укажите межваликовую температуру')),
            ],
        ),
        migrations.CreateModel(
            name='KeepingHeating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Да', 'Да'), ('Нет', 'Нет')], help_text='Укажите необходимость поддержания подогрева', max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='PartSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.FloatField(help_text='Укажите типоразмер деталей, мм')),
            ],
        ),
        migrations.CreateModel(
            name='Positions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('PA', 'PA'), ('PB', 'PB'), ('PC', 'PC'), ('PD', 'PD'), ('PE', 'PE'), ('PF', 'PF'), ('PG', 'PG'), ('PH', 'PH'), ('PJ', 'PJ')], help_text='Выберите позиции', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='PulseWelding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pulse', models.CharField(choices=[('Да', 'Да'), ('Нет', 'Нет')], help_text='Укажите необходимость применения импульсной сварки', max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='RollerCleaning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cleaning', models.CharField(choices=[('Ручная', 'Ручная'), ('Механическая', 'Механическая')], help_text='Укажите тип зачистки валиков', max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='RootProtection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protection', models.CharField(choices=[('Да', 'Да'), ('Нет', 'Нет')], help_text='Укажите необходимость защиты корня', max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='SeamReinforceHeight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.IntegerField(help_text='Укажите высоту усиления шва, мм')),
            ],
        ),
        migrations.CreateModel(
            name='SeamWidth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seamwidth', models.IntegerField(help_text='Укажите ширину шва, мм')),
            ],
        ),
        migrations.CreateModel(
            name='SectionAngle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('angle', models.IntegerField(help_text='Укажите угол разделки кромок')),
            ],
        ),
        migrations.CreateModel(
            name='ShieldingGas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Укажите тип защитного газа', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Speed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speed', models.IntegerField(help_text='Укажите скорость, м/мин')),
            ],
        ),
        migrations.CreateModel(
            name='Temperature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temp', models.IntegerField(help_text='Укажите температуру')),
            ],
        ),
        migrations.CreateModel(
            name='TempRiseSpeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speed', models.CharField(help_text='Укажите скорость подъема температуры', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='TransverseVibrations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vibration', models.CharField(choices=[('Да', 'Да'), ('Нет', 'Нет')], help_text='Укажите необходимость поперечных колебаний', max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='TungstenElectrode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('electrode', models.CharField(choices=[('WP', 'WP'), ('WT-20', 'WT-20'), ('WC-20', 'WC-20'), ('WL-15', 'WL-15'), ('WL-20', 'WL-20'), ('WY-20', 'WY-20'), ('WZ-8', 'WZ-8')], help_text='Укажите тип вольфрамового электрода', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Voltage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voltage', models.IntegerField(help_text='Укажите напряжение, В')),
            ],
        ),
        migrations.CreateModel(
            name='WeldConstruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.ImageField(help_text='Выберите схему конструкции сварного соединения', upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='WeldingProcess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('111', 'Ручная дуговая сварка'), ('135', 'Дуговая сварка в защитных газах'), ('141', 'Сварка неплавящимся электродом'), ('111+141', 'Ручная дуговая сварка неплавящимся электродом')], help_text='Выберите процесс сварки', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='WeldingSequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.ImageField(help_text='Выберите схему последовательности процесса сварки', upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='WeldType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('BW', 'Butt Weld'), ('FW', 'Fillet Weld')], help_text='Выберите тип сварного соединения', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='WPS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=10)),
                ('amperage', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.amperage')),
                ('amperage_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.amperagetype')),
                ('base_metal_A', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.basemetala')),
                ('base_metal_B', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.basemetalb')),
                ('calcination', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.calcination')),
                ('cooling_speed', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.coolingspeed')),
                ('edge_blunting_size', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.edgebluntingsize')),
                ('edge_preparation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.edgeprepapration')),
                ('excess_penetration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.excesspenetration')),
                ('filler_diameter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.fillerdiameter')),
                ('filler_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.fillertype')),
                ('gap_size', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.gapsize')),
                ('gas_consumption', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.gasconsumption')),
                ('heat_treat_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.heattreattype')),
                ('heating_method', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.heatingmethod')),
                ('heating_temp', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.heatingtemp')),
                ('holding_time', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.holdingtime')),
                ('inter_roller_temp', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.interrollertemp')),
                ('keeping_heating', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.keepingheating')),
                ('part_size', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.partsize')),
                ('positions', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.positions')),
                ('pulse_welding', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.pulsewelding')),
                ('roller_cleaning', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.rollercleaning')),
                ('root_protection', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.rootprotection')),
                ('seam_reinforce_height', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.seamreinforceheight')),
                ('seam_width', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.seamwidth')),
                ('section_angle', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.sectionangle')),
                ('shielding_gas', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.shieldinggas')),
                ('speed', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.speed')),
                ('temp_rise_speed', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.temprisespeed')),
                ('temperature', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.temperature')),
                ('transverse_vibrations', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.transversevibrations')),
                ('tungsten_electrode', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.tungstenelectrode')),
                ('voltage', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.voltage')),
                ('weld_construction', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.weldconstruction')),
                ('weld_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.weldtype')),
                ('welding_process', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.weldingprocess')),
                ('welding_sequence', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.weldingsequence')),
            ],
        ),
    ]
